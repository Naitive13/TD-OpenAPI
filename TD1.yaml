openapi: 3.0.3
info:
  title: Library
  description: Library Manager
  version: 1.1.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/HEITITAN2/std23089-td1-prog3/1.1.0
tags:
  - name: book
    description: everything about the books
  - name: author
    description: everything about authors
paths:
  /books:
    put:
      tags:
        - book
      summary: Update an existing book
      description: Update an existing book by Id
      operationId: updateBook
      parameters:
        - name: bookID
          in: query
          description: ID of the book
          required: false
          schema:
            type: string
      requestBody:
        description: Update an existent book in the library
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CrupdateBook"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid ID supplied
        "404":
          description: Book not found
    post:
      tags:
        - book
      summary: Add a new book to the library
      description: Add a new book to the library
      operationId: addBook
      requestBody:
        description: Create a new book
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CrupdateBook"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid input
    get:
      tags:
        - book
      summary: Finds a book in the library
      description: Finds a book in the library
      operationId: findBook
      parameters:
        - name: bookID
          in: query
          description: ID of the book
          required: false
          schema:
            type: string
        - name: bookName
          in: query
          description: Name of the book
          required: false
          schema:
            type: string
        - name: releaseDate
          in: query
          description: Release date of the book
          required: false
          schema:
            type: string
            format: date-time
        - name: page
          in: query
          description: page index
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: number of result per page
          required: false
          schema:
            type: integer
            default: 50
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        "404":
          description: Book not found

    delete:
      tags:
        - book
      summary: Deletes a book
      description: delete a book
      operationId: deleteBook
      parameters:
        - name: bookID
          in: query
          description: ID of the book
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
  /authors:
    put:
      tags:
        - author
      summary: Update an existing author
      description: Update an existing author by Id
      operationId: updateAuthor
      parameters:
        - name: authorID
          in: query
          description: ID of the auhtor
          required: false
          schema:
            type: string
      requestBody:
        description: Update an existent author
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
        "404":
          description: Author not found
    post:
      tags:
        - author
      summary: Add a new author
      description: Add a new auhtor
      operationId: addAuthor
      requestBody:
        description: Create a new author
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
        "400":
          description: Invalid input
    get:
      tags:
        - author
      summary: Finds an auhtor
      description: Finds an author
      operationId: findAuthor
      parameters:
        - name: authorID
          in: query
          description: ID of the author
          required: false
          schema:
            type: string
        - name: authorName
          in: query
          description: Name of the author
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: page index
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: number of result per page
          required: false
          schema:
            type: integer
            default: 50
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
        "404":
          description: Author not found

    delete:
      tags:
        - author
      summary: Deletes an author
      description: delete an author
      operationId: deleteAuthor
      parameters:
        - name: authorID
          in: query
          description: ID of the author
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - book
      summary: Update an existing book
      description: Update an existing book by Id
      operationId: updateBookWithAuthor
      parameters:
        - name: bookId
          in: path
          description: ID of the book
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          description: ID of the book
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
  /books/authors:
    put:
      tags:
        - book
      summary: Update an existing book
      description: Update an existing book by Id
      operationId: updateBooksAndAuthors
      requestBody:
        description: Update an existent book in the library
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid ID supplied
        "404":
          description: Book not found
components:
  schemas:
    Book:
      type: object
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
      properties:
        author:
          $ref: "#/components/schemas/Author"
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
          example: "BK377"
        authorId:
          type: string
          example: "AT3355"
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
          example: "B240ZH"
        bookName:
          type: string
          example: "Tom and Jerry"
        pageNumbers:
          type: integer
          format: int32
          example: 7
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
          example: "OTHER"
        releaseDate:
          type: string
          format: date-time

    Author:
      type: object
      properties:
        id:
          type: string
          example: "B240ZH"
        name:
          type: string
          example: "Jackson"
        sex:
          type: string
          enum:
            - M
            - F
          example: "M"
