openapi: 3.0.3
info:
  title: Student Course
  description: Student course manager
  version: 1.0.1
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/HEITITAN2/TD3/1.0.1
  -  url: https://localhost.std23089.com
tags:
  - name: group
    description: everything about student's groups
  - name: student
    description: everything about students
paths:
  /groups:
    put:
      tags:
        - group
      summary: Update an existing group
      description: Update an existing group
      operationId: updateGroup
      parameters:
        - name: groupName
          in: query
          description: name of the group
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent group
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'          
        '404':
          description: Book not found
    post:
      tags:
        - group
      summary: Add a new group
      description: Add a new group
      operationId: addGroup
      requestBody:
        description: Create a new group
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroup' 
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'          
        '400':
          description: Invalid input
    get:
      tags:
        - group
      summary: Finds a group
      description: Finds a group
      operationId: findGroup
      parameters:
        - name: groupName
          in: query
          description: name of the group
          required: false
          schema:
            type: string
        - name: groupYear
          in: query
          description: year of the group
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'          
        '404':
          description: group not found
 
    delete:
      tags:
        - group
      summary: Deletes a group
      description: delete a group
      operationId: deleteGroup
      parameters:
        - name: groupName
          in: query
          description: name of the group
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group' 
  /students:
    put:
      tags:
        - student
      summary: Update an existing student
      description: Update an existing student by Id
      operationId: updateStudent
      parameters:
        - name: studentID
          in: query
          description: ID of the student
          required: true
          schema:
            type: string        

      requestBody:
        description: Update an existent student
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'          
        '404':
          description: student not found
    post:
      tags:
        - student
      summary: Add a new student
      description: Add a new student
      operationId: addStudent
      requestBody:
        description: Create a new student
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudent' 
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'          
    get:
      tags:
        - student
      summary: Finds a student
      description: Finds a student
      operationId: findStudent
      parameters:        
        - name: studentName
          in: query
          description: name of the student
          required: true
          schema:
            type: string
        - name: studentID
          in: query
          description: ID of the student
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'          
        '404':
          description: Student not found
 
    delete:
      tags:
        - student
      summary: Deletes a student
      description: delete a student
      operationId: deleteStudent
      parameters:
        - name: studentID
          in: query
          description: ID of the student
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student' 
  /students/{studentId}/group:
    put:
      tags:
        - student
      summary: change the group of one student
      description: update the group of a student
      operationId: updateStudentGroup
      parameters:
        - name: studentId
          in: path
          description: ID of a student
          required: true
          schema:
            type: string
      requestBody:
        description: update student's group
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group' 
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
  /students/group:
    put:
      tags:
        - student
      summary: change the group of one student
      description: update the group of a student
      operationId: updateStudentsGroup
      requestBody:
        description: update students group
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Group' 
                - type: object
                  properties:
                    studentIDs:
                      type: array
                      items: 
                        type: string
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
  /students/{studentId}/group/{groupId}:
    put:
      tags:
        - student
      summary: change the group of one student
      description: update the group of a student
      operationId: setStudentGroupTo
      parameters:
        - name: studentId
          in: path
          description: ID of a student
          required: true
          schema:
            type: string        
        - name: groupId
          in: path
          description: ID of a group
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
components:
  schemas:
    CreateGroup:
      type: object
      properties:
        groupName:
          type: string
          example: 'J2'
        year:
          type: integer
          format: int32
          example: 2024
        promotion:
          type: string
          enum:
            - G
            - H
            - J
            - K
          example: 'J'
        numberOfStudent:
          type: integer
          format: int32
          example: 42
        students:
          type: array
          items:
            $ref: '#/components/schemas/Student'
    Group:
      allOf:
        - $ref: '#/components/schemas/CreateGroup'
        - type: object
          properties:
            id:
              type: string
              example: 'GRP001'
    BaseStudent:
      type: object
      properties:
        name:
          type: string
          example: 'Jackson'
        sex:
          type: string
          enum:
            - M
            - F
          example: 'M'
        birhdate:
          type: string
          format: date-time
        reference:
          type: string
          example: 'STD23XXX'
    CreateStudent:
      allOf:
        - $ref: "$/components/schema/BaseStudent"
        - properties:
            studentGroup:
              allOf:
                - $ref: '#/components/schemas/Group'
    Student:
      allOf:
        - $ref: '#/components/schemas/CreateStudent'
        - type: object
          properties:
            id:
              type: string
              example: 'b32544fh2a'
